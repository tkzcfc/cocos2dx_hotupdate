$#include "assets/GameManifest.h"

//struct DownloadUnit
//{
//    std::string srcUrl;
//    std::string storagePath;
//    std::string customId;
//    float       size;
//};


struct GameManifestAsset {
    std::string md5;
    std::string path;
    bool compressed;
    float size;
    int downloadState;
	// 清单文件中fileSize字段
	unsigned int fileSize;
};

class GameManifest : public cc.Ref
{
public:

    //! The type of difference
    enum DiffType {
        ADDED,
        DELETED,
        MODIFIED
    };
    
    enum DownloadState {
        UNSTARTED,
        DOWNLOADING,
        SUCCESSED,
        UNMARKED
    };
    
    //! Asset object
    typedef GameManifestAsset Asset;
    
    //! Object indicate the difference between two Assets
    struct AssetDiff {
        Asset asset;
        DiffType type;
    };
    
    /** @brief Check whether the version informations have been fully loaded
     */
    bool isVersionLoaded() ;
    
    /** @brief Check whether the manifest have been fully loaded
     */
    bool isLoaded() ;

	// 获取强更新地址
	const std::string& getStrongUpdateURL();
    
	// 获取更新描述
	const std::string& getUpdateDescription();

	// 获取强更新描述
	const std::string& getStrongUpdateDescription();
	
	// 重新启动等级
	// 0 不需要重启  1 程序自动重启 2 用户重启
	int getRestartLevel();
	
    /** @brief Gets remote package url.
     */
    const std::string& getPackageUrl() ;
    
    /** @brief Gets remote manifest file url.
     */
    const std::string& getManifestFileUrl() ;
    
    /** @brief Gets remote version file url.
     */
    const std::string& getVersionFileUrl() ;
    
    /** @brief Gets manifest version.
     */
    const std::string& getVersion() ;
    
    /** @brief Get the search paths list related to the GameManifest.
     */
    //std::vector<std::string> getSearchPaths() ;
};
